[
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "ctx",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "no_update",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "ctx",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "no_update",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "ALL",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "DiskcacheManager",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "dash_bootstrap_components",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_bootstrap_components",
        "description": "dash_bootstrap_components",
        "detail": "dash_bootstrap_components",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PreventUpdate",
        "importPath": "dash.exceptions",
        "description": "dash.exceptions",
        "isExtraImport": true,
        "detail": "dash.exceptions",
        "documentation": {}
    },
    {
        "label": "dash_mantine_components",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_mantine_components",
        "description": "dash_mantine_components",
        "detail": "dash_mantine_components",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "isExtraImport": true,
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "flask_session",
        "description": "flask_session",
        "isExtraImport": true,
        "detail": "flask_session",
        "documentation": {}
    },
    {
        "label": "diskcache",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "diskcache",
        "description": "diskcache",
        "detail": "diskcache",
        "documentation": {}
    },
    {
        "label": "register_callbacks",
        "importPath": "src.callbacks",
        "description": "src.callbacks",
        "isExtraImport": true,
        "detail": "src.callbacks",
        "documentation": {}
    },
    {
        "label": "navbar_ui",
        "importPath": "src.navbar",
        "description": "src.navbar",
        "isExtraImport": true,
        "detail": "src.navbar",
        "documentation": {}
    },
    {
        "label": "page_content_ui",
        "importPath": "src.page_content",
        "description": "src.page_content",
        "isExtraImport": true,
        "detail": "src.page_content",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "PydanticBaseSettingsSource",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "register_nav_callbacks",
        "kind": 2,
        "importPath": "src.navbar.callbacks",
        "description": "src.navbar.callbacks",
        "peekOfCode": "def register_nav_callbacks(app: Dash):\n    @app.callback(\n        output=dict(\n            user_check=Output(\"user-name-check\", \"className\"),\n            username=Output(\"user-name-value\", \"children\"),\n        ),\n        inputs=dict(\n            url_pathname=Input(\"url\", \"pathname\"),\n            url_refresh=Input(\"url\", \"refresh\"),\n        ),",
        "detail": "src.navbar.callbacks",
        "documentation": {}
    },
    {
        "label": "navbar_ui",
        "kind": 5,
        "importPath": "src.navbar.ui",
        "description": "src.navbar.ui",
        "peekOfCode": "navbar_ui = dbc.Navbar(\n    dbc.Container(\n        [\n            dbc.Row(\n                [\n                    dbc.Col(\n                        [\n                            html.Div(\n                                html.Img(\n                                    src=\"assets/logo.png\",",
        "detail": "src.navbar.ui",
        "documentation": {}
    },
    {
        "label": "mark_a_status",
        "kind": 2,
        "importPath": "src.page_content.auth.callbacks",
        "description": "src.page_content.auth.callbacks",
        "peekOfCode": "def mark_a_status(msg: str, success: bool) -> dbc.Container:\n    if success:\n        icon_class = \"fa fa-check-circle me-2 text-success\"\n    else:\n        icon_class = \"fa fa-times-circle me-2 text-danger\"\n    return dbc.Container([html.I(className=icon_class), html.Span(msg)])\ndef register_auth_callbacks(app: Dash):\n    @app.callback(\n        Output(\"sign-in-container\", \"className\"),\n        inputs=dict(url_pathname=Input(\"url\", \"pathname\")),",
        "detail": "src.page_content.auth.callbacks",
        "documentation": {}
    },
    {
        "label": "register_auth_callbacks",
        "kind": 2,
        "importPath": "src.page_content.auth.callbacks",
        "description": "src.page_content.auth.callbacks",
        "peekOfCode": "def register_auth_callbacks(app: Dash):\n    @app.callback(\n        Output(\"sign-in-container\", \"className\"),\n        inputs=dict(url_pathname=Input(\"url\", \"pathname\")),\n    )\n    def show_hide_page(url_pathname):\n        if session.get(\"authenticated\") == True:\n            return \"main-page-hidden\"\n        return \"main-page-visible\"\n    @app.callback(",
        "detail": "src.page_content.auth.callbacks",
        "documentation": {}
    },
    {
        "label": "login_form",
        "kind": 5,
        "importPath": "src.page_content.auth.ui",
        "description": "src.page_content.auth.ui",
        "peekOfCode": "login_form = dbc.Form(\n    dbc.Col(\n        [\n            dbc.Row(\n                dbc.Input(\n                    type=\"password\",\n                    placeholder=\"Authentication key\",\n                    size=\"sm\",\n                    id=\"auth-key\",\n                ),",
        "detail": "src.page_content.auth.ui",
        "documentation": {}
    },
    {
        "label": "markdown_highlight_style",
        "kind": 5,
        "importPath": "src.page_content.auth.ui",
        "description": "src.page_content.auth.ui",
        "peekOfCode": "markdown_highlight_style = {\n    \"backgroundColor\": \"rgba(0, 0, 230, 0.07)\",\n    \"color\": \"#000b3d\",\n    \"borderRadius\": \"5px\",\n    \"padding\": \"0 5px\",\n    \"fontSize\": \"1rem\",\n}\nlean_more_modal = dbc.Modal(\n    [\n        dbc.ModalHeader(\"Enerlytics\"),",
        "detail": "src.page_content.auth.ui",
        "documentation": {}
    },
    {
        "label": "lean_more_modal",
        "kind": 5,
        "importPath": "src.page_content.auth.ui",
        "description": "src.page_content.auth.ui",
        "peekOfCode": "lean_more_modal = dbc.Modal(\n    [\n        dbc.ModalHeader(\"Enerlytics\"),\n        dbc.ModalBody(\n            [\n                \"Enerlytics is an AI-powered smart metering and analytics platform designed to optimize electricity distribution and management. Our system leverages real-time data from smart meters to detect anomalies, monitor energy usage patterns, and provide actionable insights for utility providers.\",\n                html.Br(),\n                \"By combining \",\n                html.Span(\"Intelligent Algorithms \", style=markdown_highlight_style),\n                \"with modern visualization tools, Enerlytics enables faster decision-making, reduced energy loss, and improved efficiency across the power grid.\",",
        "detail": "src.page_content.auth.ui",
        "documentation": {}
    },
    {
        "label": "auth_modal",
        "kind": 5,
        "importPath": "src.page_content.auth.ui",
        "description": "src.page_content.auth.ui",
        "peekOfCode": "auth_modal = dbc.Modal(\n    [\n        dbc.ModalHeader(\n            [\n                dbc.ModalTitle(\"Authorization\", className=\"fs-6\"),\n                dcc.Loading(\n                    display=\"show\",\n                    className=\"me-5\",\n                    id=\"auth-loading-icon\",\n                ),",
        "detail": "src.page_content.auth.ui",
        "documentation": {}
    },
    {
        "label": "auth_ui",
        "kind": 5,
        "importPath": "src.page_content.auth.ui",
        "description": "src.page_content.auth.ui",
        "peekOfCode": "auth_ui = dbc.Container(\n    [\n        dbc.Container(\n            [\n                dbc.Container(\n                    [\n                        dbc.Row(\n                            login_form,\n                            className=\"h-50 d-flex justify-content-center align-items-center pe-md-5\",\n                        ),",
        "detail": "src.page_content.auth.ui",
        "documentation": {}
    },
    {
        "label": "register_dashboard_callbacks",
        "kind": 2,
        "importPath": "src.page_content.dashboard.callbacks",
        "description": "src.page_content.dashboard.callbacks",
        "peekOfCode": "def register_dashboard_callbacks(app: Dash):\n    @app.callback(\n        Output(\"dashboard-container\", \"className\"),\n        Input(\"url\", \"pathname\"),\n    )\n    def show_hide_page(url_pathname):\n        if session.get(\"authenticated\") == True:\n            return \"main-page-visible\"\n        return \"main-page-hidden\"\n    @app.callback(",
        "detail": "src.page_content.dashboard.callbacks",
        "documentation": {}
    },
    {
        "label": "create_consumption_patterns_fig",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def create_consumption_patterns_fig(data: pd.DataFrame) -> go.Figure:\n    data.index = pd.to_datetime(data.index)\n    df_long = data.reset_index().melt(\n        id_vars=\"index\", var_name=\"transformer\", value_name=\"consumption\"\n    )\n    df_long.rename(columns={\"index\": \"timestamp\"}, inplace=True)\n    df_total = df_long.groupby(\"timestamp\")[\"consumption\"].sum().reset_index()\n    fig = go.Figure()\n    transformers = df_long[\"transformer\"].unique()\n    for t in transformers:",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "create_trend_analysis_fig",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def create_trend_analysis_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef create_freq_analysis_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef create_anomaly_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef get_plots(data: DashboardData) -> Plots:\n    return Plots(\n        num_transformers=data.num_transformers,\n        num_meters=data.num_meters,",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "create_freq_analysis_fig",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def create_freq_analysis_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef create_anomaly_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef get_plots(data: DashboardData) -> Plots:\n    return Plots(\n        num_transformers=data.num_transformers,\n        num_meters=data.num_meters,\n        consump_ptrns_dict=create_consumption_patterns_fig(\n            data.consumption_pattern_df",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "create_anomaly_fig",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def create_anomaly_fig(data: pd.DataFrame) -> go.Figure:\n    return create_consumption_patterns_fig(data)\ndef get_plots(data: DashboardData) -> Plots:\n    return Plots(\n        num_transformers=data.num_transformers,\n        num_meters=data.num_meters,\n        consump_ptrns_dict=create_consumption_patterns_fig(\n            data.consumption_pattern_df\n        ).to_dict(),\n        trend_analysis_dict=create_trend_analysis_fig(data.trend_analysis_df).to_dict(),",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "get_plots",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def get_plots(data: DashboardData) -> Plots:\n    return Plots(\n        num_transformers=data.num_transformers,\n        num_meters=data.num_meters,\n        consump_ptrns_dict=create_consumption_patterns_fig(\n            data.consumption_pattern_df\n        ).to_dict(),\n        trend_analysis_dict=create_trend_analysis_fig(data.trend_analysis_df).to_dict(),\n        freq_analysis_dict=create_freq_analysis_fig(data.freq_analysis_df).to_dict(),\n        anomaly_dict=create_anomaly_fig(data.anomaly_df).to_dict(),",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "text_plot",
        "kind": 2,
        "importPath": "src.page_content.dashboard.plots",
        "description": "src.page_content.dashboard.plots",
        "peekOfCode": "def text_plot(text: str) -> go.Figure:\n    fig = go.Figure()\n    fig.add_annotation(\n        text=text,\n        xref=\"paper\",\n        yref=\"paper\",\n        x=0.5,\n        y=0.5,\n        showarrow=False,\n        font=dict(size=14, color=\"orange\"),",
        "detail": "src.page_content.dashboard.plots",
        "documentation": {}
    },
    {
        "label": "CoverageAreaType",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class CoverageAreaType(Enum):\n    COUNTRY = \"country\"\n    PROVINCE = \"province\"\n    DISTRICT = \"district\"\n    SUB_DISTRICT = \"sub-district\"\n    VILLAGE = \"village\"\nclass CoverageArea(BaseModel):\n    id: str\n    type: CoverageAreaType\n    name: str",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "CoverageArea",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class CoverageArea(BaseModel):\n    id: str\n    type: CoverageAreaType\n    name: str\n    description: str\n    checked: bool = False\n    sub_areas: List[\"CoverageArea\"] = []\n    @property\n    def badge_color(self):\n        match self.type:",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "DashboardData",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class DashboardData(BaseModel):\n    coverage_area_ids: List[str]\n    datetime_start: datetime\n    datetime_end: datetime\n    num_transformers: int\n    num_meters: int\n    consumption_pattern_dict: Dict[str, Any]\n    trend_analysis_dict: Dict[str, Any]\n    freq_analysis_dict: Dict[str, Any]\n    anomaly_dict: Dict[str, Any]",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "Plots",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class Plots(BaseModel):\n    num_transformers: int\n    num_meters: int\n    consump_ptrns_dict: Dict[str, Any]\n    trend_analysis_dict: Dict[str, Any]\n    freq_analysis_dict: Dict[str, Any]\n    anomaly_dict: Dict[str, Any]\n    @property\n    def consump_ptrns_fig(self) -> go.Figure:  # type: ignore\n        return go.Figure(self.consump_ptrns_dict)  # type: ignore",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "SignalStream",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class SignalStream(BaseModel):\n    title: str\n    message: str\n    status: Literal[\"success\", \"warning\", \"danger\", \"info\", \"primary\", \"secondary\"]\n    timestamp: datetime\nclass ChatMessage(BaseModel):\n    id: str\n    message: str\n    sender: Literal[\"user\", \"lyti\"]\n    timestamp: datetime",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class ChatMessage(BaseModel):\n    id: str\n    message: str\n    sender: Literal[\"user\", \"lyti\"]\n    timestamp: datetime\nclass ChatThread(BaseModel):\n    id: str\n    title: str\n    messages: List[ChatMessage] | None = None\n    created_at: datetime",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "ChatThread",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class ChatThread(BaseModel):\n    id: str\n    title: str\n    messages: List[ChatMessage] | None = None\n    created_at: datetime\n    updated_at: datetime\nclass ChatThreads(BaseModel):\n    threads: Dict[str, List[ChatThread]]\n    def get_sorted_threads(self, reverse: bool = True) -> Dict[str, List[ChatThread]]:\n        \"\"\"",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "ChatThreads",
        "kind": 6,
        "importPath": "src.page_content.dashboard.schemas",
        "description": "src.page_content.dashboard.schemas",
        "peekOfCode": "class ChatThreads(BaseModel):\n    threads: Dict[str, List[ChatThread]]\n    def get_sorted_threads(self, reverse: bool = True) -> Dict[str, List[ChatThread]]:\n        \"\"\"\n        Sort the threads by date in order.\n        Args:\n            reverse (bool): If True, the threads will be sorted in descending order.\n                If False, the threads will be sorted in ascending order.\n        Returns:\n            A dictionary of threads sorted by date.",
        "detail": "src.page_content.dashboard.schemas",
        "documentation": {}
    },
    {
        "label": "chat_history_modal",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "chat_history_modal = dbc.Modal(\n    [\n        dbc.ModalHeader(\n            dbc.ModalTitle(\n                [\n                    \"Chat History\",\n                    html.I(className=\"fa fa-history text-muted ms-2\"),\n                ],\n                className=\"fs-6 d-flex align-items-center\",\n            ),",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "chat_canvas",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "chat_canvas = html.Div(\n    [\n        dbc.Offcanvas(\n            [\n                dbc.Container(\n                    [\n                        dbc.Container(\n                            [\n                                html.Span(\n                                    \"New Chat\",",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "coverage_area_modal",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "coverage_area_modal = dbc.Modal(\n    [\n        dbc.ModalHeader(\n            [\n                dbc.ModalTitle(\"Select Coverage Areas\", className=\"fs-6\"),\n                html.I(\n                    className=\"fa fa-street-view text-muted\", **{\"aria-hidden\": \"true\"}  # type: ignore\n                ),\n            ],\n            class_name=\"d-flex justify-content-between pe-4\",",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "signal_stream_canvas",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "signal_stream_canvas = html.Div(\n    [\n        dbc.Offcanvas(\n            id=\"signal-stream-canvas\",\n            scrollable=True,\n            title=html.Div(\n                [\n                    html.I(\n                        className=\"fa fa-bell text-muted me-3\",\n                        **{\"aria-hidden\": \"true\"},  # type: ignore",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "fullscreen_graph_modal",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "fullscreen_graph_modal = dbc.Modal(\n    [dbc.ModalHeader(), dbc.ModalBody(dcc.Graph(id=\"fullscreen-graph\"))],\n    id=\"graph-fullscreen-modal\",\n    fullscreen=True,\n)\ndashboard_ui = dbc.Container(\n    [\n        dbc.Container(\n            [\n                dbc.Alert(",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "dashboard_ui",
        "kind": 5,
        "importPath": "src.page_content.dashboard.ui",
        "description": "src.page_content.dashboard.ui",
        "peekOfCode": "dashboard_ui = dbc.Container(\n    [\n        dbc.Container(\n            [\n                dbc.Alert(\n                    duration=5000,\n                    dismissable=True,\n                    fade=True,\n                    is_open=False,\n                    color=\"warning\",",
        "detail": "src.page_content.dashboard.ui",
        "documentation": {}
    },
    {
        "label": "readable_when",
        "kind": 2,
        "importPath": "src.page_content.dashboard.utils",
        "description": "src.page_content.dashboard.utils",
        "peekOfCode": "def readable_when(date_: datetime | date | str) -> str:\n    if isinstance(date_, date):\n        date_ = datetime.combine(date_, datetime.min.time())\n    try:\n        date_ = date_parse(date_)  # type: ignore\n    except ValueError:\n        raise ValueError(\n            \"Invalid date. Must be a datetime, date, or datetime/date string.\"\n        )\n    minutes_ago = (datetime.now() - date_).total_seconds() / 60",
        "detail": "src.page_content.dashboard.utils",
        "documentation": {}
    },
    {
        "label": "get_coverage_areas",
        "kind": 2,
        "importPath": "src.page_content.dashboard.waiter",
        "description": "src.page_content.dashboard.waiter",
        "peekOfCode": "def get_coverage_areas() -> List[CoverageArea]:\n    \"\"\"\n    Get the coverage areas from the api\n    \"\"\"\n    time.sleep(2)\n    return [\n        CoverageArea(\n            id=\"1\",\n            type=CoverageAreaType.COUNTRY,\n            name=\"Ghana\",",
        "detail": "src.page_content.dashboard.waiter",
        "documentation": {}
    },
    {
        "label": "get_dashboard_data",
        "kind": 2,
        "importPath": "src.page_content.dashboard.waiter",
        "description": "src.page_content.dashboard.waiter",
        "peekOfCode": "def get_dashboard_data(\n    datetime_start: datetime,\n    datetime_end: datetime,\n    coverage_areas_ids: List[str],\n) -> DashboardData:\n    \"\"\"\n    Get the data for all graphs and infos given some filters.\n    Args:\n        datetime_start: The start date and time of the data to fetch.\n        datetime_end: The end date and time of the data to fetch.",
        "detail": "src.page_content.dashboard.waiter",
        "documentation": {}
    },
    {
        "label": "get_signal_streams",
        "kind": 2,
        "importPath": "src.page_content.dashboard.waiter",
        "description": "src.page_content.dashboard.waiter",
        "peekOfCode": "def get_signal_streams() -> List[SignalStream]:\n    time.sleep(1)\n    return [\n        SignalStream(\n            title=\"Transformer 1 stopped working\",\n            message=\"Transformer 1 stopped working at 10:00 AM. Please check the transformer.\",\n            status=\"danger\",\n            timestamp=datetime.now() - timedelta(hours=1),\n        ),\n        SignalStream(",
        "detail": "src.page_content.dashboard.waiter",
        "documentation": {}
    },
    {
        "label": "get_chat_thread",
        "kind": 2,
        "importPath": "src.page_content.dashboard.waiter",
        "description": "src.page_content.dashboard.waiter",
        "peekOfCode": "def get_chat_thread(\n    thread_id: str,\n    new_message: str | None = None,\n    datetime_start: datetime | str | None = None,\n    datetime_end: datetime | str | None = None,\n    coverage_areas_ids: List[str] | None = None,\n) -> ChatThread:\n    \"\"\"\n    Get a chat thread with messages.\n    Args:",
        "detail": "src.page_content.dashboard.waiter",
        "documentation": {}
    },
    {
        "label": "get_chat_threads",
        "kind": 2,
        "importPath": "src.page_content.dashboard.waiter",
        "description": "src.page_content.dashboard.waiter",
        "peekOfCode": "def get_chat_threads() -> ChatThreads:\n    \"\"\"\n    Return chat threads for a user. Does not include the messages in the threads.\n    Returns:\n        ChatThreads: A list of chat threads.\n    \"\"\"\n    chat_threads = [\n        ChatThread(\n            id=\"1\",\n            title=\"Transformer 1 stopped working\",",
        "detail": "src.page_content.dashboard.waiter",
        "documentation": {}
    },
    {
        "label": "register_page_content_callbacks",
        "kind": 2,
        "importPath": "src.page_content.callbacks",
        "description": "src.page_content.callbacks",
        "peekOfCode": "def register_page_content_callbacks(app: Dash):\n    pass\n    # @app.callback(\n    #     Output(\"page-content-sign-in\", \"class_name\", allow_duplicate=True),\n    #     Output(\"page-content-dashboard\", \"class_name\", allow_duplicate=True),\n    #     Output(\"data-name\", \"children\"),\n    #     Input(\"url\", \"pathname\"),\n    #     Input(\"url\", \"refresh\"),\n    # )\n    # def on_app_reload(pathname, refresh):",
        "detail": "src.page_content.callbacks",
        "documentation": {}
    },
    {
        "label": "get_footer",
        "kind": 2,
        "importPath": "src.page_content.footer_ui",
        "description": "src.page_content.footer_ui",
        "peekOfCode": "def get_footer(add_logout_btn: bool = False):\n    return html.Footer(\n        [\n            html.Span(\n                [\n                    \"Created by \",\n                    html.A(\n                        \"Aaron Ontoyin\",\n                        href=\"https://aaronontoyin.tech/\",\n                        target=\"_blank\",",
        "detail": "src.page_content.footer_ui",
        "documentation": {}
    },
    {
        "label": "page_content_ui",
        "kind": 5,
        "importPath": "src.page_content.ui",
        "description": "src.page_content.ui",
        "peekOfCode": "page_content_ui = dbc.Container(\n    [auth_ui, dashboard_ui],\n    fluid=True,\n    className=\"w-100 h-100 position-relative\",\n    style={\"overflow\": \"hidden\"},\n)",
        "detail": "src.page_content.ui",
        "documentation": {}
    },
    {
        "label": "register_callbacks",
        "kind": 2,
        "importPath": "src.callbacks",
        "description": "src.callbacks",
        "peekOfCode": "def register_callbacks(app: Dash):\n    register_nav_callbacks(app)\n    register_page_content_callbacks(app)",
        "detail": "src.callbacks",
        "documentation": {}
    },
    {
        "label": "external_stylesheets",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "external_stylesheets = [\n    dbc.themes.BOOTSTRAP,\n    \"assets/styles.css\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\",\n]\nserver = Flask(__name__)\nserver.secret_key = settings.SECRET_KEY\nserver.config[\"SESSION_TYPE\"] = settings.SESSION_TYPE\nserver.config[\"SESSION_PERMANENT\"] = settings.SESSION_PERMANENT\nSession(server)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "server = Flask(__name__)\nserver.secret_key = settings.SECRET_KEY\nserver.config[\"SESSION_TYPE\"] = settings.SESSION_TYPE\nserver.config[\"SESSION_PERMANENT\"] = settings.SESSION_PERMANENT\nSession(server)\ncache = diskcache.Cache(\"./cache\")\nbackground_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "server.secret_key = settings.SECRET_KEY\nserver.config[\"SESSION_TYPE\"] = settings.SESSION_TYPE\nserver.config[\"SESSION_PERMANENT\"] = settings.SESSION_PERMANENT\nSession(server)\ncache = diskcache.Cache(\"./cache\")\nbackground_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server.config[\"SESSION_TYPE\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "server.config[\"SESSION_TYPE\"] = settings.SESSION_TYPE\nserver.config[\"SESSION_PERMANENT\"] = settings.SESSION_PERMANENT\nSession(server)\ncache = diskcache.Cache(\"./cache\")\nbackground_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,\n    suppress_callback_exceptions=True,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server.config[\"SESSION_PERMANENT\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "server.config[\"SESSION_PERMANENT\"] = settings.SESSION_PERMANENT\nSession(server)\ncache = diskcache.Cache(\"./cache\")\nbackground_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,\n    suppress_callback_exceptions=True,\n    external_stylesheets=external_stylesheets,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cache = diskcache.Cache(\"./cache\")\nbackground_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,\n    suppress_callback_exceptions=True,\n    external_stylesheets=external_stylesheets,\n    prevent_initial_callbacks=True,\n    background_callback_manager=background_callback_manager,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "background_callback_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "background_callback_manager = DiskcacheManager(cache)\napp = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,\n    suppress_callback_exceptions=True,\n    external_stylesheets=external_stylesheets,\n    prevent_initial_callbacks=True,\n    background_callback_manager=background_callback_manager,\n)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Dash(\n    __name__,\n    title=\"AI Power Overloard\",\n    server=server,\n    suppress_callback_exceptions=True,\n    external_stylesheets=external_stylesheets,\n    prevent_initial_callbacks=True,\n    background_callback_manager=background_callback_manager,\n)\nlayout = dbc.Container(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "layout",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "layout = dbc.Container(\n    [\n        dcc.Location(id=\"url\", refresh=False),\n        dcc.Store(id=\"local-store\", storage_type=\"session\", data={}),\n        html.Div(id=\"dummy-output\", className=\"d-none\"),\n        dcc.Interval(id=\"signal-stream-interval\", interval=3 * 60 * 1000),\n        navbar_ui,\n        page_content_ui,\n    ],\n    fluid=True,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.layout",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.layout = dmc.MantineProvider(children=layout)\nregister_callbacks(app)\nif __name__ == \"__main__\":\n    app.run(debug=False)  # type: ignore",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Class to store all the settings of the application.\"\"\"\n    ENVIRONMENT: Literal[\"dev\", \"prod\"] = \"dev\"\n    ADMIN_KEY: str\n    API_KEY: str\n    SECRET_KEY: str\n    SESSION_TYPE: str\n    SESSION_PERMANENT: bool = False\n    REDIS_URL: str\n    APOSTGRES_DATABASE_URL: str = (",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "hash_key",
        "kind": 2,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "def hash_key(key: str) -> str:\n    \"\"\"Hash the key using SHA-256.\"\"\"\n    return hashlib.sha256(key.encode()).hexdigest()\nclass Settings(BaseSettings):\n    \"\"\"Class to store all the settings of the application.\"\"\"\n    ENVIRONMENT: Literal[\"dev\", \"prod\"] = \"dev\"\n    ADMIN_KEY: str\n    API_KEY: str\n    SECRET_KEY: str\n    SESSION_TYPE: str",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "settings = Settings()",
        "detail": "settings",
        "documentation": {}
    }
]